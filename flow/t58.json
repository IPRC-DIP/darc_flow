{"nodes": [{"id": "0", "type": "val", "name": "input", "val": "[[4 4 0 5 0 0 0 5 0 0 0]\n [0 4 0 5 0 0 4 5 4 4 0]\n [4 0 0 5 0 0 0 5 0 4 0]\n [5 5 5 5 5 5 5 5 5 5 5]\n [0 0 0 5 0 0 0 5 0 4 0]\n [4 0 0 5 0 4 0 5 4 0 4]\n [0 0 0 5 0 0 0 5 0 0 0]\n [5 5 5 5 5 5 5 5 5 5 5]\n [0 0 0 5 0 4 0 5 0 0 4]\n [4 0 0 5 0 0 4 5 0 4 0]\n [0 0 0 5 4 4 0 5 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "centers = traverse the input which is a 2-dim numpy array, return positions which satisfies that there is no grey in its 3*3 neighbor(input)", "subgraph": null}, {"id": "2", "type": "val", "name": "centers", "val": "[(1, 1), (1, 5), (1, 9), (5, 1), (5, 5), (5, 9), (9, 1), (9, 5), (9, 9)]"}, {"id": "3", "type": "stmt", "val": "scores = for each position in the centers, count the yellow position in its 3*3 neighbor(input, centers)", "subgraph": null}, {"id": "4", "type": "val", "name": "scores", "val": "[4. 1. 3. 1. 1. 3. 1. 4. 2.]"}, {"id": "5", "type": "stmt", "val": "(center_yellow, center_black) = return all the centers with the max scores and other centers(centers, scores)", "subgraph": null}, {"id": "6", "type": "val", "name": "center_yellow", "val": "[(1, 1), (9, 5)]"}, {"id": "7", "type": "val", "name": "center_black", "val": "[(1, 5), (1, 9), (5, 1), (5, 5), (5, 9), (9, 1), (9, 9)]"}, {"id": "8", "type": "stmt", "val": "output = for each position in the position list, make its 3*3 neighbor yellow(input, center_yellow)", "subgraph": null}, {"id": "10", "type": "val", "name": "output", "val": "[[4 4 4 5 0 0 0 5 0 0 0]\n [4 4 4 5 0 0 4 5 4 4 0]\n [4 4 4 5 0 0 0 5 0 4 0]\n [5 5 5 5 5 5 5 5 5 5 5]\n [0 0 0 5 0 0 0 5 0 4 0]\n [4 0 0 5 0 4 0 5 4 0 4]\n [0 0 0 5 0 0 0 5 0 0 0]\n [5 5 5 5 5 5 5 5 5 5 5]\n [0 0 0 5 4 4 4 5 0 0 4]\n [4 0 0 5 4 4 4 5 0 4 0]\n [0 0 0 5 4 4 4 5 0 0 0]]"}, {"id": "11", "type": "stmt", "val": "output = for each position in the position list, make its 3*3 neighbor black(output, center_black)", "subgraph": null}, {"id": "13", "type": "val", "name": "output", "val": "[[4 4 4 5 0 0 0 5 0 0 0]\n [4 4 4 5 0 0 0 5 0 0 0]\n [4 4 4 5 0 0 0 5 0 0 0]\n [5 5 5 5 5 5 5 5 5 5 5]\n [0 0 0 5 0 0 0 5 0 0 0]\n [0 0 0 5 0 0 0 5 0 0 0]\n [0 0 0 5 0 0 0 5 0 0 0]\n [5 5 5 5 5 5 5 5 5 5 5]\n [0 0 0 5 4 4 4 5 0 0 0]\n [0 0 0 5 4 4 4 5 0 0 0]\n [0 0 0 5 4 4 4 5 0 0 0]]"}, {"id": "14", "type": "stmt", "val": "return output", "subgraph": null}, {"id": "16", "type": "val", "name": "out", "val": "[[4 4 4 5 0 0 0 5 0 0 0]\n [4 4 4 5 0 0 0 5 0 0 0]\n [4 4 4 5 0 0 0 5 0 0 0]\n [5 5 5 5 5 5 5 5 5 5 5]\n [0 0 0 5 0 0 0 5 0 0 0]\n [0 0 0 5 0 0 0 5 0 0 0]\n [0 0 0 5 0 0 0 5 0 0 0]\n [5 5 5 5 5 5 5 5 5 5 5]\n [0 0 0 5 4 4 4 5 0 0 0]\n [0 0 0 5 4 4 4 5 0 0 0]\n [0 0 0 5 4 4 4 5 0 0 0]]"}], "edges": [["0", "1"], ["1", "2"], ["2", "3"], ["0", "3"], ["3", "4"], ["4", "5"], ["2", "5"], ["5", "6"], ["5", "7"], ["6", "8"], ["0", "8"], ["8", "10"], ["7", "11"], ["10", "11"], ["11", "13"], ["13", "14"], ["14", "16"]]}