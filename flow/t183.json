{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[3 3 3 0 3 3 3 0 2 2 2 2 2 2 2 0 0 0 4 4 4 4 0 4 4 4 4 4]\n [3 3 3 3 3 3 3 0 2 2 0 2 2 2 2 0 4 0 4 4 4 4 4 4 4 4 4 4]\n [0 3 0 0 3 3 0 0 2 2 0 0 2 2 2 0 4 4 4 4 4 4 4 4 4 4 4 4]\n [3 0 3 3 3 3 3 0 2 0 2 2 2 2 2 0 4 0 0 4 4 4 4 4 4 4 4 4]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [1 1 1 1 1 0 1 0 1 1 0 0 1 1 1 0 8 8 8 0 8 8 8 8 8 0 8 0]\n [1 1 1 0 1 0 1 0 1 1 1 1 0 1 1 0 8 8 8 8 8 8 0 8 0 8 8 0]\n [1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 8 8 8 8 8 8 8 0 8 8 8 8]\n [1 1 0 1 1 1 0 0 1 1 1 1 1 0 1 0 8 8 8 0 8 8 8 8 8 8 0 8]\n [0 0 0 1 1 0 1 0 1 0 0 1 1 1 1 0 0 0 8 8 8 0 8 8 0 8 8 8]\n [1 1 1 0 1 1 0 0 0 1 1 1 0 1 1 0 8 8 8 8 8 8 0 8 0 8 8 0]\n [1 1 1 0 0 0 1 0 1 1 1 1 1 0 1 0 8 8 8 8 8 0 0 0 8 8 8 8]\n [1 1 1 1 1 1 1 0 1 1 1 1 1 0 0 0 8 8 8 8 0 8 8 8 8 8 0 8]\n [1 1 1 0 0 1 1 0 0 1 1 1 1 0 1 0 0 8 8 8 8 8 8 8 8 8 8 8]\n [1 0 1 1 0 1 1 0 1 1 1 1 1 1 1 0 8 8 8 8 8 8 8 8 8 0 8 0]\n [1 1 1 0 1 0 1 0 1 1 0 1 1 1 1 0 8 0 8 0 8 8 8 8 8 8 8 8]\n [1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 0 8 8 8 8 8 8 0 8 0 8 8 8]\n [1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 0 8 0 8 8 8 8 8 8 8 8 0 8]\n [0 1 0 1 1 1 1 0 1 1 1 0 1 1 0 0 8 0 8 8 8 8 8 0 8 8 8 8]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [7 7 0 7 7 0 7 0 3 3 0 0 3 3 3 0 2 0 2 2 2 2 0 2 2 0 2 2]\n [7 7 7 0 7 7 7 0 0 3 3 0 3 0 0 0 2 2 2 2 2 0 2 2 2 2 2 0]\n [7 7 7 7 7 7 7 0 3 3 3 3 3 3 3 0 2 2 2 2 2 2 2 2 2 2 2 2]]"}, {"id": "1", "type": "stmt", "val": "(rows, colomns) = find all rows and colomns with all black pixels(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "rows", "val": "[4, 19]"}, {"id": "3", "type": "val", "name": "colomns", "val": "[7, 15]"}, {"id": "4", "type": "stmt", "val": "(rows, colomns) = add 0 at the start of rows and colomns, add the last row numbers of input_grid at the end of rows, add the biggest colomn numbers of input_grid at the end of colomns(rows, colomns, input_grid)", "subgraph": null}, {"id": "5", "type": "val", "name": "rows", "val": "[0, 5, 20, 23]"}, {"id": "6", "type": "val", "name": "colomns", "val": "[0, 8, 16, 28]"}, {"id": "7", "type": "stmt", "val": "sub_grids = divide the input grid in to several subgrids by the rows and colomns(rows, colomns, input_grid)", "subgraph": null}, {"id": "8", "type": "val", "name": "sub_grids", "val": "[array([[3, 3, 3, 0, 3, 3, 3, 0],\n       [3, 3, 3, 3, 3, 3, 3, 0],\n       [0, 3, 0, 0, 3, 3, 0, 0],\n       [3, 0, 3, 3, 3, 3, 3, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0]]), array([[2, 2, 2, 2, 2, 2, 2, 0],\n       [2, 2, 0, 2, 2, 2, 2, 0],\n       [2, 2, 0, 0, 2, 2, 2, 0],\n       [2, 0, 2, 2, 2, 2, 2, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0]]), array([[0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4],\n       [4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n       [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n       [4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]), array([[1, 1, 1, 1, 1, 0, 1, 0],\n       [1, 1, 1, 0, 1, 0, 1, 0],\n       [1, 0, 1, 1, 1, 1, 1, 0],\n       [1, 1, 0, 1, 1, 1, 0, 0],\n       [0, 0, 0, 1, 1, 0, 1, 0],\n       [1, 1, 1, 0, 1, 1, 0, 0],\n       [1, 1, 1, 0, 0, 0, 1, 0],\n       [1, 1, 1, 1, 1, 1, 1, 0],\n       [1, 1, 1, 0, 0, 1, 1, 0],\n       [1, 0, 1, 1, 0, 1, 1, 0],\n       [1, 1, 1, 0, 1, 0, 1, 0],\n       [1, 1, 1, 1, 1, 1, 1, 0],\n       [1, 0, 1, 1, 1, 1, 1, 0],\n       [0, 1, 0, 1, 1, 1, 1, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0]]), array([[1, 1, 0, 0, 1, 1, 1, 0],\n       [1, 1, 1, 1, 0, 1, 1, 0],\n       [1, 1, 1, 1, 1, 1, 1, 0],\n       [1, 1, 1, 1, 1, 0, 1, 0],\n       [1, 0, 0, 1, 1, 1, 1, 0],\n       [0, 1, 1, 1, 0, 1, 1, 0],\n       [1, 1, 1, 1, 1, 0, 1, 0],\n       [1, 1, 1, 1, 1, 0, 0, 0],\n       [0, 1, 1, 1, 1, 0, 1, 0],\n       [1, 1, 1, 1, 1, 1, 1, 0],\n       [1, 1, 0, 1, 1, 1, 1, 0],\n       [0, 1, 0, 1, 1, 1, 1, 0],\n       [1, 1, 1, 1, 1, 0, 1, 0],\n       [1, 1, 1, 0, 1, 1, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0]]), array([[8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 0],\n       [8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 8, 0],\n       [8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8],\n       [8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 0, 8],\n       [0, 0, 8, 8, 8, 0, 8, 8, 0, 8, 8, 8],\n       [8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 8, 0],\n       [8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8],\n       [8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8],\n       [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n       [8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0],\n       [8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8],\n       [8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 8, 8],\n       [8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8],\n       [8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8],\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]), array([[7, 7, 0, 7, 7, 0, 7, 0],\n       [7, 7, 7, 0, 7, 7, 7, 0],\n       [7, 7, 7, 7, 7, 7, 7, 0]]), array([[3, 3, 0, 0, 3, 3, 3, 0],\n       [0, 3, 3, 0, 3, 0, 0, 0],\n       [3, 3, 3, 3, 3, 3, 3, 0]]), array([[2, 0, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2],\n       [2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]])]"}, {"id": "9", "type": "stmt", "val": "output_grid = create the output grid with row number 1 bigger than number of rows, colomn number 1 bigger than number of colomns(rows, colomns)", "subgraph": null}, {"id": "10", "type": "val", "name": "output_grid", "val": "[[0 0 0]\n [0 0 0]\n [0 0 0]]"}, {"id": "11", "type": "stmt", "val": "output_grid = find the kind of colors in the subgrids, and fill these colors in the output grid(sub_grids, output_grid)", "subgraph": null}, {"id": "12", "type": "val", "name": "output_grid", "val": "[[3 2 4]\n [1 1 8]\n [7 3 2]]"}, {"id": "13", "type": "stmt", "val": "return output_grid", "subgraph": null}, {"id": "15", "type": "val", "name": "out", "val": "[[3 2 4]\n [1 1 8]\n [7 3 2]]"}], "edges": [["0", "1"], ["1", "2"], ["1", "3"], ["2", "4"], ["0", "4"], ["3", "4"], ["4", "5"], ["4", "6"], ["5", "7"], ["0", "7"], ["6", "7"], ["7", "8"], ["5", "9"], ["6", "9"], ["9", "10"], ["8", "11"], ["10", "11"], ["11", "12"], ["12", "13"], ["13", "15"]]}