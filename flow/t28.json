{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 8 1 1 8 0 0 8 0 8 0 0 0 8]\n [0 1 0 8 8 1 0 1 1 2 8 1 1 2 0 2]\n [0 0 8 8 1 1 8 8 1 1 8 0 8 0 0 1]\n [1 0 1 0 8 0 1 8 1 0 1 1 8 8 8 0]\n [8 0 8 3 3 3 3 3 3 3 3 3 3 3 0 2]\n [1 0 8 3 2 0 8 1 1 1 0 1 0 3 0 0]\n [0 8 8 3 8 1 0 8 2 8 1 2 8 3 1 8]\n [1 0 8 3 8 2 0 2 0 1 1 8 1 3 8 8]\n [0 8 0 3 0 1 8 8 1 1 8 1 8 3 2 1]\n [1 0 0 3 0 1 8 8 0 8 0 2 0 3 8 1]\n [0 8 8 3 0 8 8 2 8 8 8 8 8 3 8 8]\n [1 1 1 3 8 0 2 0 0 0 0 8 8 3 8 0]\n [1 8 0 3 0 2 8 8 1 2 0 0 2 3 8 1]\n [8 1 1 3 3 3 3 3 3 3 3 3 3 3 0 2]\n [8 1 0 0 0 0 8 8 0 1 2 8 8 8 1 8]\n [8 1 0 0 1 1 8 0 1 2 8 1 0 1 2 0]\n [8 0 8 2 8 0 8 2 0 1 8 1 8 1 8 8]]"}, {"id": "1", "type": "stmt", "val": "(tcolor, tcnt) = Traverse each row, if a row has a color that appears consecutively, record this color as tcolor and the number of times it appears consecutively tcnt. Find the largest tcnt across all rows, return that tcolor and tcnt(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "tcolor", "val": "3"}, {"id": "3", "type": "val", "name": "tcnt", "val": "11"}, {"id": "4", "type": "stmt", "val": "(lux, luy) = Traverse all pixels in the input grid, if the pixel is tcolor, and the pixel to the right and below the pixel are both tcolor, return the coordinates of the pixel (lux, luy)(input_grid, tcolor)", "subgraph": null}, {"id": "5", "type": "val", "name": "lux", "val": "4"}, {"id": "6", "type": "val", "name": "luy", "val": "3"}, {"id": "7", "type": "stmt", "val": "(lbx, lby) = Traverse all pixels in the input grid, if the pixel is tcolor, and the pixel to the right and upper the pixel are both tcolor, return the coordinates of the pixel (lbx, lby)(input_grid, tcolor, lux, luy)", "subgraph": null}, {"id": "8", "type": "val", "name": "lbx", "val": "13"}, {"id": "9", "type": "val", "name": "lby", "val": "13"}, {"id": "10", "type": "stmt", "val": "ans_grid = In the inputgrid, take (lux+1, luy+1) as the upper left corner, take the subgrid whose shape is (lby - luy -1, tcnt-2), and return the grid(input_grid, lux, luy, lbx, lby, tcnt)", "subgraph": null}, {"id": "11", "type": "val", "name": "ans_grid", "val": "[[2 0 8 1 1 1 0 1 0]\n [8 1 0 8 2 8 1 2 8]\n [8 2 0 2 0 1 1 8 1]\n [0 1 8 8 1 1 8 1 8]\n [0 1 8 8 0 8 0 2 0]\n [0 8 8 2 8 8 8 8 8]\n [8 0 2 0 0 0 0 8 8]\n [0 2 8 8 1 2 0 0 2]]"}, {"id": "12", "type": "stmt", "val": "return ans_grid", "subgraph": null}, {"id": "14", "type": "val", "name": "out", "val": "[[2 0 8 1 1 1 0 1 0]\n [8 1 0 8 2 8 1 2 8]\n [8 2 0 2 0 1 1 8 1]\n [0 1 8 8 1 1 8 1 8]\n [0 1 8 8 0 8 0 2 0]\n [0 8 8 2 8 8 8 8 8]\n [8 0 2 0 0 0 0 8 8]\n [0 2 8 8 1 2 0 0 2]]"}], "edges": [["0", "1"], ["1", "2"], ["1", "3"], ["0", "4"], ["2", "4"], ["4", "5"], ["4", "6"], ["6", "7"], ["0", "7"], ["2", "7"], ["5", "7"], ["7", "8"], ["7", "9"], ["6", "10"], ["0", "10"], ["9", "10"], ["3", "10"], ["5", "10"], ["8", "10"], ["10", "11"], ["11", "12"], ["12", "14"]]}