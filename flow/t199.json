{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "output_grid = same size as input but all black(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "output_grid", "val": "[[0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]]"}, {"id": "3", "type": "stmt", "val": "(col, ele) = find the non zero element and return the column of the position and the element(input_grid)", "subgraph": null}, {"id": "4", "type": "val", "name": "col", "val": "2"}, {"id": "5", "type": "val", "name": "ele", "val": "1"}, {"id": "6", "type": "stmt", "val": "for i in range(input_grid.shape[1]):", "subgraph": null}, {"id": "7", "type": "val", "name": "i", "val": "0"}, {"id": "9", "type": "stmt", "val": "for i in range(input_grid.shape[1]):", "subgraph": null}, {"id": "10", "type": "val", "name": "i", "val": "1"}, {"id": "13", "type": "val", "name": "i", "val": "2"}, {"id": "15", "type": "stmt", "val": "output_grid = if input i minus col is even, replace the i-th column in output_grid with input ele (output_grid, i, col, ele)", "subgraph": null}, {"id": "16", "type": "val", "name": "output_grid", "val": "[[0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]]"}, {"id": "20", "type": "val", "name": "i", "val": "3"}, {"id": "23", "type": "stmt", "val": "output_grid = if input i minus col is 1,5,9 and so on, replace the first element in i-th column in output_grid with grey (output_grid, i, col)", "subgraph": null}, {"id": "24", "type": "val", "name": "output_grid", "val": "[[0 0 1 5 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]\n [0 0 1 0 0 0 0 0 0 0]]"}, {"id": "67", "type": "val", "name": "output_grid", "val": "[[0 0 1 5 1 0 1 5 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 5 1 0 1 5]]"}, {"id": "69", "type": "stmt", "val": "return output_grid", "subgraph": null}, {"id": "71", "type": "val", "name": "out", "val": "[[0 0 1 5 1 0 1 5 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 0 1 0 1 0]\n [0 0 1 0 1 5 1 0 1 5]]"}], "edges": [["0", "1"], ["1", "2"], ["0", "3"], ["3", "4"], ["3", "5"], ["0", "6"], ["6", "7"], ["7", "9"], ["0", "9"], ["9", "10"], ["4", "15"], ["13", "15"], ["2", "15"], ["5", "15"], ["15", "16"], ["20", "23"], ["16", "23"], ["4", "23"], ["23", "24"], ["67", "69"], ["69", "71"]]}