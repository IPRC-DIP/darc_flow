{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 3 0 3 0 0 0 0 2 0 0 0]\n [0 0 0 0 3 3 0 0 0 2 2 2 0 0]\n [0 0 0 3 0 3 0 0 0 2 2 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 8 0 0 0 0 0 0]\n [0 2 0 0 0 0 8 0 8 0 0 0 0 0]\n [2 2 2 0 0 0 0 8 0 0 0 0 0 0]\n [2 2 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 2 0 0 0 3 0 3 0 0]\n [0 0 0 0 2 2 2 0 0 0 3 3 0 0]\n [0 0 0 0 2 2 0 0 0 3 0 3 0 0]]"}, {"id": "1", "type": "stmt", "val": "c = Returns the color with the highest number of pixels except for black(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "c", "val": "2"}, {"id": "3", "type": "stmt", "val": "out = Find and return a 3x3 matrix from the input, with at least one pixel color of c in each row and at least one pixel color of c in each column(input_grid, c)", "subgraph": null}, {"id": "4", "type": "val", "name": "out", "val": "[[0 2 0]\n [2 2 2]\n [2 2 0]]"}, {"id": "5", "type": "stmt", "val": "return out", "subgraph": null}, {"id": "6", "type": "val", "name": "out", "val": "[[0 2 0]\n [2 2 2]\n [2 2 0]]"}], "edges": [["0", "1"], ["1", "2"], ["2", "3"], ["0", "3"], ["3", "4"], ["4", "5"], ["5", "6"]]}