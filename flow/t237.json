{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0]\n [0 0 0 0 0 2 0 0 0 0 0 4 0 0 0 0]\n [0 0 0 0 0 2 0 0 0 0 0 4 0 0 0 0]\n [0 0 0 0 0 2 0 0 0 0 0 4 0 0 0 0]\n [0 0 0 0 0 2 0 0 0 0 0 4 0 0 0 0]\n [0 0 0 0 0 2 0 0 0 0 0 4 0 0 0 0]\n [0 0 0 0 0 0 3 3 3 3 3 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 8 8 0 8 8 0 0 0 0 0 0 0 0 0]\n [0 0 8 0 8 8 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 8 8 8 8 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 8 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 8 8 0 8 8 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "p = find all not black and not teal pixels(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "p", "val": "[[0 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0]\n [0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0]\n [0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0]\n [0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0]\n [0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0]\n [0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0]\n [0 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "3", "type": "stmt", "val": "t = find all teal pixels(input_grid)", "subgraph": null}, {"id": "4", "type": "val", "name": "t", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0]\n [0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "5", "type": "stmt", "val": "s = get the max and min row and col of pixels in t, return the pixels between and in this four edge(input_grid, t)", "subgraph": null}, {"id": "6", "type": "val", "name": "s", "val": "[[8 8 0 8 8]\n [8 0 8 8 0]\n [0 8 8 8 8]\n [0 0 8 0 0]\n [8 8 0 8 8]]"}, {"id": "7", "type": "stmt", "val": "l = get the max and min row and col of pixels in p, return the pixels between and in this four edge(input_grid, p)", "subgraph": null}, {"id": "8", "type": "val", "name": "l", "val": "[[0 1 1 1 1 1 0]\n [2 0 0 0 0 0 4]\n [2 0 0 0 0 0 4]\n [2 0 0 0 0 0 4]\n [2 0 0 0 0 0 4]\n [2 0 0 0 0 0 4]\n [0 3 3 3 3 3 0]]"}, {"id": "9", "type": "stmt", "val": "o = create a copy of l, find the inner black area in l, copy the square area s to the black area in the copy of l(s, l)", "subgraph": null}, {"id": "10", "type": "val", "name": "o", "val": "[[0 1 1 1 1 1 0]\n [2 8 8 0 8 8 4]\n [2 8 0 8 8 0 4]\n [2 0 8 8 8 8 4]\n [2 0 0 8 0 0 4]\n [2 8 8 0 8 8 4]\n [0 3 3 3 3 3 0]]"}, {"id": "11", "type": "stmt", "val": "out = if any teal pixel in o, if it is not in the diagonal of o, turn the color of the teal pixel, if row > col and rol + col < height - 1 to the color of left edge line, if row > col and rol + col > height - 1 to the color of bottom edge line, if row < col and rol + col < height - 1 to the color of top edge line, if row < col and rol + col > height - 1 to the color of right edge line(o)", "subgraph": null}, {"id": "13", "type": "val", "name": "out", "val": "[[0 1 1 1 1 1 0]\n [2 8 1 0 1 8 4]\n [2 2 0 1 8 0 4]\n [2 0 2 8 4 4 4]\n [2 0 0 3 0 0 4]\n [2 8 3 0 3 8 4]\n [0 3 3 3 3 3 0]]"}, {"id": "14", "type": "stmt", "val": "return out", "subgraph": null}, {"id": "15", "type": "val", "name": "out", "val": "[[0 1 1 1 1 1 0]\n [2 8 1 0 1 8 4]\n [2 2 0 1 8 0 4]\n [2 0 2 8 4 4 4]\n [2 0 0 3 0 0 4]\n [2 8 3 0 3 8 4]\n [0 3 3 3 3 3 0]]"}], "edges": [["0", "1"], ["1", "2"], ["0", "3"], ["3", "4"], ["4", "5"], ["0", "5"], ["5", "6"], ["0", "7"], ["2", "7"], ["7", "8"], ["6", "9"], ["8", "9"], ["9", "10"], ["10", "11"], ["11", "13"], ["13", "14"], ["14", "15"]]}