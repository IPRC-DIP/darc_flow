{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 7 0]\n [0 0 2 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 2 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 7 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 2 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 5]]"}, {"id": "1", "type": "stmt", "val": "red_grids = find all red grids in the input and return their positions(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "red_grids", "val": "[(1, 2), (3, 7), (7, 5)]"}, {"id": "3", "type": "stmt", "val": "output = find all black grids with legal positions that are adjacent to the red grids(diagonally adjacent included). Color them blue.(input_grid, red_grids)", "subgraph": null}, {"id": "5", "type": "val", "name": "output", "val": "[[0 1 1 1 0 0 0 0 7 0]\n [0 1 2 1 0 0 0 0 0 0]\n [0 1 1 1 0 0 1 1 1 0]\n [0 0 0 0 0 0 1 2 1 0]\n [0 0 0 0 0 0 1 1 1 0]\n [0 7 0 0 0 0 0 0 0 0]\n [0 0 0 0 1 1 1 0 0 0]\n [0 0 0 0 1 2 1 0 0 0]\n [0 0 0 0 1 1 1 0 0 0]\n [0 0 0 0 0 0 0 0 0 5]]"}, {"id": "6", "type": "stmt", "val": "return output", "subgraph": null}, {"id": "8", "type": "val", "name": "out", "val": "[[0 1 1 1 0 0 0 0 7 0]\n [0 1 2 1 0 0 0 0 0 0]\n [0 1 1 1 0 0 1 1 1 0]\n [0 0 0 0 0 0 1 2 1 0]\n [0 0 0 0 0 0 1 1 1 0]\n [0 7 0 0 0 0 0 0 0 0]\n [0 0 0 0 1 1 1 0 0 0]\n [0 0 0 0 1 2 1 0 0 0]\n [0 0 0 0 1 1 1 0 0 0]\n [0 0 0 0 0 0 0 0 0 5]]"}], "edges": [["0", "1"], ["1", "2"], ["2", "3"], ["0", "3"], ["3", "5"], ["5", "6"], ["6", "8"]]}