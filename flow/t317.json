{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[1 0 1 0]\n [1 0 1 0]\n [0 1 0 0]\n [1 0 1 0]\n [4 4 4 4]\n [2 2 0 0]\n [0 0 2 0]\n [0 2 0 2]\n [2 2 2 0]]"}, {"id": "1", "type": "stmt", "val": "mindex = Find a yellow line and return the index of the line(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "mindex", "val": "4"}, {"id": "3", "type": "stmt", "val": "ngrid = np.zeros((input_grid.shape[0] // 2, input_grid.shape[1]))", "subgraph": null}, {"id": "4", "type": "val", "name": "ngrid", "val": "[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]"}, {"id": "5", "type": "stmt", "val": "ans_grid = Traverse all pixels in the inputgrid whose line number is less than mindex, if the value of the pixel is black and the value of (x+mindex+1, y) is black, then change the ngrid (x, y) to black; else change the pixel to green. return ngrid(input_grid, mindex, ngrid)", "subgraph": null}, {"id": "7", "type": "val", "name": "ans_grid", "val": "[[3. 3. 3. 0.]\n [3. 0. 3. 0.]\n [0. 3. 0. 3.]\n [3. 3. 3. 0.]]"}, {"id": "8", "type": "stmt", "val": "return ans_grid", "subgraph": null}, {"id": "10", "type": "val", "name": "out", "val": "[[3. 3. 3. 0.]\n [3. 0. 3. 0.]\n [0. 3. 0. 3.]\n [3. 3. 3. 0.]]"}], "edges": [["0", "1"], ["1", "2"], ["0", "3"], ["3", "4"], ["0", "5"], ["4", "5"], ["2", "5"], ["5", "7"], ["7", "8"], ["8", "10"]]}