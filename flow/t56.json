{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0]\n [0 0 0 3 0 0 0 0]\n [0 3 3 3 0 0 0 0]\n [0 3 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "non_black_pixels = get the non_black_pixels in the input_grid(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "non_black_pixels", "val": "[(4, 3), (5, 1), (5, 2), (5, 3), (6, 1)]"}, {"id": "3", "type": "stmt", "val": "smallest_rect = find the smallest_rect which contains all of these non_black_pixels in the input_grid(non_black_pixels, input_grid)", "subgraph": null}, {"id": "4", "type": "val", "name": "smallest_rect", "val": "[[0 0 3]\n [3 3 3]\n [3 0 0]]"}, {"id": "5", "type": "stmt", "val": "output_grid = np.concatenate([smallest_rect, smallest_rect], axis=1)", "subgraph": null}, {"id": "6", "type": "val", "name": "output_grid", "val": "[[0 0 3 0 0 3]\n [3 3 3 3 3 3]\n [3 0 0 3 0 0]]"}, {"id": "7", "type": "stmt", "val": "return output_grid", "subgraph": null}, {"id": "9", "type": "val", "name": "out", "val": "[[0 0 3 0 0 3]\n [3 3 3 3 3 3]\n [3 0 0 3 0 0]]"}], "edges": [["0", "1"], ["1", "2"], ["0", "3"], ["2", "3"], ["3", "4"], ["4", "5"], ["5", "6"], ["6", "7"], ["7", "9"]]}