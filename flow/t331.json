{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 5 0 0 0 5 0 5 0 0 5 0 5 0 0]\n [5 0 5 0 0 5 0 0 5 0 0 5 0 0 0 5 0]\n [0 5 0 0 5 0 5 0 0 0 5 0 0 5 0 0 5]]"}, {"id": "1", "type": "stmt", "val": "output_grid = same size as input(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "output_grid", "val": "[[0 0 0 5 0 0 0 5 0 5 0 0 5 0 5 0 0]\n [5 0 5 0 0 5 0 0 5 0 0 5 0 0 0 5 0]\n [0 5 0 0 5 0 5 0 0 0 5 0 0 5 0 0 5]]"}, {"id": "3", "type": "stmt", "val": "for i in range(input_grid.shape[1]):", "subgraph": null}, {"id": "4", "type": "val", "name": "i", "val": "0"}, {"id": "5", "type": "stmt", "val": "output_grid = find the total column of output_grid and caculate the total column minus i, if the result is odd, replace grey element in the i-th colmun with green element(output_grid, i)", "subgraph": null}, {"id": "6", "type": "val", "name": "output_grid", "val": "[[0 0 0 5 0 0 0 5 0 5 0 0 5 0 5 0 0]\n [3 0 5 0 0 5 0 0 5 0 0 5 0 0 0 5 0]\n [0 5 0 0 5 0 5 0 0 0 5 0 0 5 0 0 5]]"}, {"id": "7", "type": "stmt", "val": "for i in range(input_grid.shape[1]):", "subgraph": null}, {"id": "8", "type": "val", "name": "i", "val": "1"}, {"id": "62", "type": "val", "name": "output_grid", "val": "[[0 0 0 5 0 0 0 5 0 5 0 0 3 0 3 0 0]\n [3 0 3 0 0 5 0 0 3 0 0 5 0 0 0 5 0]\n [0 5 0 0 3 0 3 0 0 0 3 0 0 5 0 0 3]]"}, {"id": "64", "type": "stmt", "val": "return output_grid", "subgraph": null}, {"id": "66", "type": "val", "name": "out", "val": "[[0 0 0 5 0 0 0 5 0 5 0 0 3 0 3 0 0]\n [3 0 3 0 0 5 0 0 3 0 0 5 0 0 0 5 0]\n [0 5 0 0 3 0 3 0 0 0 3 0 0 5 0 0 3]]"}], "edges": [["0", "1"], ["1", "2"], ["0", "3"], ["3", "4"], ["4", "5"], ["2", "5"], ["5", "6"], ["4", "7"], ["0", "7"], ["7", "8"], ["62", "64"], ["64", "66"]]}