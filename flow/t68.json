{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0]\n [0 8 8 0 0 0 8 8 0 0]\n [8 8 8 8 0 8 8 8 8 0]\n [0 0 8 0 0 0 0 8 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 4 4 0 0 0 0 0 0 0]\n [3 4 3 3 0 0 8 8 0 0]\n [0 0 3 0 0 8 8 8 8 0]\n [0 0 0 0 0 0 0 8 0 0]\n [0 0 0 0 0 0 0 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "ans_grid = Generate a new grid, exactly the same as input_grid. Blacken all the teal pixels(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "ans_grid", "val": "[[0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 4 4 0 0 0 0 0 0 0]\n [3 4 3 3 0 0 0 0 0 0]\n [0 0 3 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]]"}, {"id": "3", "type": "stmt", "val": "(minx, miny, maxx, maxy) = Define four variables (minx, miny, maxx, maxy) as the smallest x, the smallest y, the largest x, and the largest y. Traverse all the pixels in the new grid, if a pixel (x, y) is not black, use the pixel to update the above four variables(ans_grid)", "subgraph": null}, {"id": "4", "type": "val", "name": "minx", "val": "5"}, {"id": "5", "type": "val", "name": "miny", "val": "0"}, {"id": "6", "type": "val", "name": "maxx", "val": "7"}, {"id": "7", "type": "val", "name": "maxy", "val": "3"}, {"id": "8", "type": "stmt", "val": "target_grid = Extract the subgrid with (minx, miny) as the upper left corner and (maxx, maxy) as the lower right corner, and return the grid(ans_grid, minx, miny, maxx, maxy)", "subgraph": null}, {"id": "9", "type": "val", "name": "target_grid", "val": "[[0 4 4 0]\n [3 4 3 3]\n [0 0 3 0]]"}, {"id": "10", "type": "stmt", "val": "mask_grid = Generate a new grid with the same size as the target_grid. If the pixel in the subgrid is non-black, the value in the new grid is teal; otherwise, it is black(target_grid)", "subgraph": null}, {"id": "11", "type": "val", "name": "mask_grid", "val": "[[0 8 8 0]\n [8 8 8 8]\n [0 0 8 0]]"}, {"id": "12", "type": "stmt", "val": "input_grid[minx:maxx + 1, miny:maxy + 1] = black", "subgraph": null}, {"id": "13", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0]\n [0 8 8 0 0 0 8 8 0 0]\n [8 8 8 8 0 8 8 8 8 0]\n [0 0 8 0 0 0 0 8 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 8 8 0 0]\n [0 0 0 0 0 8 8 8 8 0]\n [0 0 0 0 0 0 0 8 0 0]\n [0 0 0 0 0 0 0 0 0 0]]"}, {"id": "14", "type": "stmt", "val": "ans = Traverse all the elements in the inputgrid, match each pixel with a grid same as mask_grid, if the current pixel is matched, overwrite the position with a grid same as target_grid(input_grid, target_grid, mask_grid)", "subgraph": null}, {"id": "16", "type": "val", "name": "ans", "val": "[[0 0 0 0 0 0 0 0 0 0]\n [0 4 4 0 0 0 4 4 0 0]\n [3 4 3 3 0 3 4 3 3 0]\n [0 0 3 0 0 0 0 3 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 4 4 0 0]\n [0 0 0 0 0 3 4 3 3 0]\n [0 0 0 0 0 0 0 3 0 0]\n [0 0 0 0 0 0 0 0 0 0]]"}, {"id": "17", "type": "stmt", "val": "return ans", "subgraph": null}, {"id": "19", "type": "val", "name": "out", "val": "[[0 0 0 0 0 0 0 0 0 0]\n [0 4 4 0 0 0 4 4 0 0]\n [3 4 3 3 0 3 4 3 3 0]\n [0 0 3 0 0 0 0 3 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 4 4 0 0]\n [0 0 0 0 0 3 4 3 3 0]\n [0 0 0 0 0 0 0 3 0 0]\n [0 0 0 0 0 0 0 0 0 0]]"}], "edges": [["0", "1"], ["1", "2"], ["2", "3"], ["3", "4"], ["3", "5"], ["3", "6"], ["3", "7"], ["7", "8"], ["4", "8"], ["5", "8"], ["2", "8"], ["6", "8"], ["8", "9"], ["9", "10"], ["10", "11"], ["7", "12"], ["4", "12"], ["0", "12"], ["5", "12"], ["6", "12"], ["12", "13"], ["11", "14"], ["9", "14"], ["13", "14"], ["14", "16"], ["16", "17"], ["17", "19"]]}