{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[9 0 9]\n [0 0 9]\n [9 0 9]\n [0 1 1]\n [0 1 0]\n [1 0 0]]"}, {"id": "1", "type": "stmt", "val": "(m1, m2) = The input_grid is a 6x3 matrix, divide it into 2 3x3 matrices and return(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "m1", "val": "[[9 0 9]\n [0 0 9]\n [9 0 9]]"}, {"id": "3", "type": "val", "name": "m2", "val": "[[0 1 1]\n [0 1 0]\n [1 0 0]]"}, {"id": "4", "type": "stmt", "val": "out = Build a 3x3 matrix of black()", "subgraph": null}, {"id": "5", "type": "val", "name": "out", "val": "[[0 0 0]\n [0 0 0]\n [0 0 0]]"}, {"id": "6", "type": "stmt", "val": "out = for each pixel in out, if the corresponding pixels in m1 and m2 are both black, replace it with red(out, m1, m2)", "subgraph": null}, {"id": "7", "type": "val", "name": "out", "val": "[[0 0 0]\n [2 0 0]\n [0 2 0]]"}, {"id": "8", "type": "stmt", "val": "return out", "subgraph": null}, {"id": "9", "type": "val", "name": "out", "val": "[[0 0 0]\n [2 0 0]\n [0 2 0]]"}], "edges": [["0", "1"], ["1", "2"], ["1", "3"], ["4", "5"], ["2", "6"], ["3", "6"], ["5", "6"], ["6", "7"], ["7", "8"], ["8", "9"]]}