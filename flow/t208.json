{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 8 0 3 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "(x1, y1, x2, y2) = From left to right, top to bottom, traverse the entire grid, find the first yellow pixel (x1, y1), the last yellow pixel (x2, y2), return (x1, y1, x2, y2)(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "x1", "val": "0"}, {"id": "3", "type": "val", "name": "y1", "val": "0"}, {"id": "4", "type": "val", "name": "x2", "val": "13"}, {"id": "5", "type": "val", "name": "y2", "val": "17"}, {"id": "6", "type": "stmt", "val": "ans_grid = input_grid[x1:x2 + 1, y1:y2 + 1].copy()", "subgraph": null}, {"id": "7", "type": "val", "name": "ans_grid", "val": "[[4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4]]"}, {"id": "8", "type": "stmt", "val": "input_grid[x1:x2 + 1, y1:y2 + 1] = black", "subgraph": null}, {"id": "9", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 8 0 3 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "10", "type": "stmt", "val": "(minx, miny, maxx, maxy) = Define four variables (minx, miny, maxx, maxy) as the smallest x, the smallest y, the largest x, and the largest y. Traverse all the pixels in the new grid, if a pixel (x, y) is not black, use the pixel to update the above four variables(input_grid)", "subgraph": null}, {"id": "11", "type": "val", "name": "minx", "val": "15"}, {"id": "12", "type": "val", "name": "miny", "val": "8"}, {"id": "13", "type": "val", "name": "maxx", "val": "17"}, {"id": "14", "type": "val", "name": "maxy", "val": "10"}, {"id": "15", "type": "stmt", "val": "target_grid = input_grid[minx:maxx + 1, miny:maxy + 1]", "subgraph": null}, {"id": "16", "type": "val", "name": "target_grid", "val": "[[8 0 3]\n [1 1 1]\n [0 1 0]]"}, {"id": "17", "type": "stmt", "val": "(kind, cnt) = Traverse all pixels in ansgrid, count the kind and quantity of non-black pixels, and return (kind, cnt)(ans_grid)", "subgraph": null}, {"id": "18", "type": "val", "name": "kind", "val": "3"}, {"id": "19", "type": "val", "name": "cnt", "val": "36"}, {"id": "20", "type": "stmt", "val": "side_length = math.sqrt(cnt / (kind - 1))", "subgraph": null}, {"id": "21", "type": "val", "name": "side_length", "val": "4.242640687119285"}, {"id": "22", "type": "stmt", "val": "target_grid = Expand the target_grid proportionally by the side_length times, and the shape becomes (4*target_grid.shape[0],4*target_grid.shape[1])(target_grid, side_length)", "subgraph": null}, {"id": "23", "type": "val", "name": "target_grid", "val": "[[8 8 8 8 0 0 0 0 3 3 3 3]\n [8 8 8 8 0 0 0 0 3 3 3 3]\n [8 8 8 8 0 0 0 0 3 3 3 3]\n [8 8 8 8 0 0 0 0 3 3 3 3]\n [1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1]\n [0 0 0 0 1 1 1 1 0 0 0 0]\n [0 0 0 0 1 1 1 1 0 0 0 0]\n [0 0 0 0 1 1 1 1 0 0 0 0]\n [0 0 0 0 1 1 1 1 0 0 0 0]]"}, {"id": "24", "type": "stmt", "val": "ans = Find the first non-black and non-yellow pixel (x, y) in ans_grid, copy target_grid as grid to this position(ans_grid, target_grid)", "subgraph": null}, {"id": "26", "type": "val", "name": "ans", "val": "[[4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0]\n [4 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 4]]"}, {"id": "27", "type": "stmt", "val": "return ans", "subgraph": null}, {"id": "29", "type": "val", "name": "out", "val": "[[4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0]\n [4 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 4]]"}], "edges": [["0", "1"], ["1", "2"], ["1", "3"], ["1", "4"], ["1", "5"], ["4", "6"], ["0", "6"], ["2", "6"], ["3", "6"], ["5", "6"], ["6", "7"], ["4", "8"], ["0", "8"], ["2", "8"], ["3", "8"], ["5", "8"], ["8", "9"], ["9", "10"], ["10", "11"], ["10", "12"], ["10", "13"], ["10", "14"], ["14", "15"], ["11", "15"], ["9", "15"], ["12", "15"], ["13", "15"], ["15", "16"], ["7", "17"], ["17", "18"], ["17", "19"], ["18", "20"], ["19", "20"], ["20", "21"], ["16", "22"], ["21", "22"], ["22", "23"], ["7", "24"], ["23", "24"], ["24", "26"], ["26", "27"], ["27", "29"]]}