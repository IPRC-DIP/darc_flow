{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 2 2 0 0 0 0 0 0]\n [0 0 1 1 0 0 0 0 0 0 0]\n [0 0 0 3 3 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 5 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "p = find all not black and not grey pixels(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "p", "val": "[(2, 3), (2, 4), (3, 2), (3, 3), (4, 3), (4, 4)]"}, {"id": "3", "type": "stmt", "val": "a = find the 3x3 area in the input_grid which could cover all pixels in p(input_grid, p)", "subgraph": null}, {"id": "4", "type": "val", "name": "a", "val": "(2, 5, 2, 5)"}, {"id": "5", "type": "stmt", "val": "out = find the grey pixel in the input_grid, let it be the center pixel, copy the 3x3 area a in the new 3x3 area in the input_grid whose center is the grey pixel(a, input_grid)", "subgraph": null}, {"id": "6", "type": "val", "name": "out", "val": "[[0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 2 2 0 0 0 0 0 0]\n [0 0 1 1 0 0 0 0 0 0 0]\n [0 0 0 3 3 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 2 2 0 0 0]\n [0 0 0 0 0 1 1 0 0 0 0]\n [0 0 0 0 0 0 3 3 0 0 0]]"}, {"id": "7", "type": "stmt", "val": "return out", "subgraph": null}, {"id": "8", "type": "val", "name": "out", "val": "[[0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 2 2 0 0 0 0 0 0]\n [0 0 1 1 0 0 0 0 0 0 0]\n [0 0 0 3 3 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 2 2 0 0 0]\n [0 0 0 0 0 1 1 0 0 0 0]\n [0 0 0 0 0 0 3 3 0 0 0]]"}], "edges": [["0", "1"], ["1", "2"], ["2", "3"], ["0", "3"], ["3", "4"], ["0", "5"], ["4", "5"], ["5", "6"], ["6", "7"], ["7", "8"]]}