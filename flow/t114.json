{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[3 3 3 3 2 2 2 2 2 1 1 1 8 8]\n [3 3 3 2 2 2 2 2 1 1 1 8 8 8]\n [3 3 3 3 3 2 2 1 1 1 8 8 8 8]\n [3 3 3 3 3 2 2 1 1 1 1 8 8 8]\n [3 3 3 3 2 2 2 2 2 1 1 1 8 8]\n [3 3 3 3 3 2 2 2 2 1 1 1 1 8]\n [3 3 3 2 2 2 2 2 1 1 1 1 8 8]\n [3 3 3 3 2 2 2 2 1 1 1 8 8 8]\n [3 3 3 3 2 2 2 2 1 1 1 1 8 8]\n [3 3 3 2 2 2 2 2 2 1 1 1 8 8]\n [3 3 3 2 2 2 2 2 2 1 1 8 8 8]\n [3 3 3 3 2 2 2 2 1 1 1 1 8 8]\n [3 3 3 3 3 2 2 2 1 1 1 1 8 8]\n [3 3 3 3 3 3 2 2 2 1 1 1 8 8]]"}, {"id": "1", "type": "stmt", "val": "cnt = Count the color types in input_grid,return the number of color kind(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "cnt", "val": "4"}, {"id": "3", "type": "stmt", "val": "target_line = If the number of colors in the first row is equal to cnt, return the first row; otherwise, return the first column(input_grid, cnt)", "subgraph": null}, {"id": "4", "type": "val", "name": "target_line", "val": "[3 3 3 3 2 2 2 2 2 1 1 1 8 8]"}, {"id": "5", "type": "stmt", "val": "ans_grid = Remove the repeated color in targetline and arranged in order of appearance of colors, and return the deduplicated array(target_line)", "subgraph": null}, {"id": "6", "type": "val", "name": "ans_grid", "val": "[3 2 1 8]"}, {"id": "8", "type": "stmt", "val": "ans_grid = np.expand_dims(ans_grid, axis=0)", "subgraph": null}, {"id": "9", "type": "val", "name": "ans_grid", "val": "[[3 2 1 8]]"}, {"id": "10", "type": "stmt", "val": "return ans_grid", "subgraph": null}, {"id": "12", "type": "val", "name": "out", "val": "[[3 2 1 8]]"}], "edges": [["0", "1"], ["1", "2"], ["0", "3"], ["2", "3"], ["3", "4"], ["4", "5"], ["5", "6"], ["6", "8"], ["8", "9"], ["9", "10"], ["10", "12"]]}