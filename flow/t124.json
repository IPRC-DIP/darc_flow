{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 8 8 8 8 8 6 6 6 8 8 8]\n [8 8 6 6 6 6 8 8 8 6 6 6 8 8 8]\n [8 8 6 8 8 6 8 8 8 6 8 6 8 8 8]\n [8 8 6 8 8 6 8 8 8 6 8 6 8 8 8]\n [8 8 6 6 6 6 8 8 8 6 8 6 8 8 8]\n [8 8 8 8 8 8 8 8 8 6 6 6 8 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 6 6 6 6 6 6 6 8 8 8 8]\n [8 8 8 8 6 6 8 8 6 6 6 8 8 8 8]\n [8 8 8 8 6 6 6 6 6 6 6 8 8 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]]"}, {"id": "1", "type": "stmt", "val": "ans_grid = Go through all the pixels,The current pixel is in the boundary, only consider the pixel within the boundary. if a pixel is teal and one of the four surrounding pixels is pink, change the pixel to green. If a pixel is teal and two or more of the four pixels around it are pink, change the pixel to yellow(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "ans_grid", "val": "[[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 8 8 8 8 8 3 3 3 8 8 8]\n [8 8 3 3 3 3 8 8 3 6 6 6 3 8 8]\n [8 3 6 6 6 6 3 8 3 6 6 6 3 8 8]\n [8 3 6 4 4 6 3 8 3 6 4 6 3 8 8]\n [8 3 6 4 4 6 3 8 3 6 4 6 3 8 8]\n [8 3 6 6 6 6 3 8 3 6 4 6 3 8 8]\n [8 8 3 3 3 3 8 8 3 6 6 6 3 8 8]\n [8 8 8 8 8 8 8 8 8 3 3 3 8 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 3 3 3 3 3 3 3 8 8 8 8]\n [8 8 8 3 6 6 6 6 6 6 6 3 8 8 8]\n [8 8 8 3 6 6 4 4 6 6 6 3 8 8 8]\n [8 8 8 3 6 6 6 6 6 6 6 3 8 8 8]\n [8 8 8 8 3 3 3 3 3 3 3 8 8 8 8]]"}, {"id": "3", "type": "stmt", "val": "ans_grid = Traverse all pixels,The current pixel is in the boundary, only consider the pixel within the boundary. if a pixel is teal and two of the eight pixels around it are green and one of them is pink, change the pixel to green(ans_grid)", "subgraph": null}, {"id": "4", "type": "val", "name": "ans_grid", "val": "[[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 8 8 8 8 3 3 3 3 3 8 8]\n [8 3 3 3 3 3 3 8 3 6 6 6 3 8 8]\n [8 3 6 6 6 6 3 8 3 6 6 6 3 8 8]\n [8 3 6 4 4 6 3 8 3 6 4 6 3 8 8]\n [8 3 6 4 4 6 3 8 3 6 4 6 3 8 8]\n [8 3 6 6 6 6 3 8 3 6 4 6 3 8 8]\n [8 3 3 3 3 3 3 8 3 6 6 6 3 8 8]\n [8 8 8 8 8 8 8 8 3 3 3 3 3 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 3 3 3 3 3 3 3 3 3 8 8 8]\n [8 8 8 3 6 6 6 6 6 6 6 3 8 8 8]\n [8 8 8 3 6 6 4 4 6 6 6 3 8 8 8]\n [8 8 8 3 6 6 6 6 6 6 6 3 8 8 8]\n [8 8 8 3 3 3 3 3 3 3 3 3 8 8 8]]"}, {"id": "5", "type": "stmt", "val": "return ans_grid", "subgraph": null}, {"id": "7", "type": "val", "name": "out", "val": "[[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 8 8 8 8 3 3 3 3 3 8 8]\n [8 3 3 3 3 3 3 8 3 6 6 6 3 8 8]\n [8 3 6 6 6 6 3 8 3 6 6 6 3 8 8]\n [8 3 6 4 4 6 3 8 3 6 4 6 3 8 8]\n [8 3 6 4 4 6 3 8 3 6 4 6 3 8 8]\n [8 3 6 6 6 6 3 8 3 6 4 6 3 8 8]\n [8 3 3 3 3 3 3 8 3 6 6 6 3 8 8]\n [8 8 8 8 8 8 8 8 3 3 3 3 3 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 3 3 3 3 3 3 3 3 3 8 8 8]\n [8 8 8 3 6 6 6 6 6 6 6 3 8 8 8]\n [8 8 8 3 6 6 4 4 6 6 6 3 8 8 8]\n [8 8 8 3 6 6 6 6 6 6 6 3 8 8 8]\n [8 8 8 3 3 3 3 3 3 3 3 3 8 8 8]]"}], "edges": [["0", "1"], ["1", "2"], ["2", "3"], ["3", "4"], ["4", "5"], ["5", "7"]]}