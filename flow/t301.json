{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0]\n [0 5 5 5 5 5 0 0 0 0 0 0]\n [0 5 0 0 0 5 0 0 0 0 0 0]\n [0 5 0 0 0 5 0 0 0 0 0 0]\n [0 5 0 0 0 5 0 0 5 5 5 0]\n [0 5 5 5 5 5 0 0 5 0 5 0]\n [0 0 0 0 0 0 0 0 5 5 5 0]\n [0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 5 5 5 5 0 0 0 0]\n [0 0 0 0 5 0 0 5 0 0 0 0]\n [0 0 0 0 5 0 0 5 0 0 0 0]\n [0 0 0 0 5 5 5 5 0 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "target_list = Iterate over all pixels in the input grid, if a pixel (x, y) is gray, and the pixels below and to the right of it are also gray. Then traverse all the pixels in the same line, if there is a gray pixel (bx,by) and the pixel on the right side of the pixel is black, record cnt=by-y. If cnt is not None, add (x, y, cnt) to the answer list. back to list of answers(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "target_list", "val": "[(1, 1, 4), (4, 8, 2), (8, 4, 3)]"}, {"id": "3", "type": "stmt", "val": "ans_grid = color_gray_pixels(input_grid, target_list)", "subgraph": "t301_1"}, {"id": "5", "type": "val", "name": "ans_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0]\n [0 5 5 5 5 5 0 0 0 0 0 0]\n [0 5 8 8 8 5 0 0 0 0 0 0]\n [0 5 8 8 8 5 0 0 0 0 0 0]\n [0 5 8 8 8 5 0 0 5 5 5 0]\n [0 5 5 5 5 5 0 0 5 6 5 0]\n [0 0 0 0 0 0 0 0 5 5 5 0]\n [0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 5 5 5 5 0 0 0 0]\n [0 0 0 0 5 7 7 5 0 0 0 0]\n [0 0 0 0 5 7 7 5 0 0 0 0]\n [0 0 0 0 5 5 5 5 0 0 0 0]]"}, {"id": "6", "type": "stmt", "val": "return ans_grid", "subgraph": null}, {"id": "8", "type": "val", "name": "out", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0]\n [0 5 5 5 5 5 0 0 0 0 0 0]\n [0 5 8 8 8 5 0 0 0 0 0 0]\n [0 5 8 8 8 5 0 0 0 0 0 0]\n [0 5 8 8 8 5 0 0 5 5 5 0]\n [0 5 5 5 5 5 0 0 5 6 5 0]\n [0 0 0 0 0 0 0 0 5 5 5 0]\n [0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 5 5 5 5 0 0 0 0]\n [0 0 0 0 5 7 7 5 0 0 0 0]\n [0 0 0 0 5 7 7 5 0 0 0 0]\n [0 0 0 0 5 5 5 5 0 0 0 0]]"}], "edges": [["0", "1"], ["1", "2"], ["0", "3"], ["2", "3"], ["3", "5"], ["5", "6"], ["6", "8"]]}