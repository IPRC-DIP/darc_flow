{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 4 0 0 0 4]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 4 0 0 0 4]\n [4 0 0 4 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [4 0 0 4 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "ans_list = Traverse all the pixels in the inputgrid, if a pixel (x, y) is yellow. Traverse all pixels in the same column, if there is another yellow pixel (ax, ay) and ax>x, record cnt1 = ax - x; traverse all pixels in the same row, if there is another yellow pixel (bx,by) and bx> x, remember cnt2=by-y. If cnt1 and cnt2 are non-none, add (x, y, cnt1, cnt2) to the answer list. back to list of answers(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "ans_list", "val": "[(0, 5, 4, 4), (5, 0, 3, 3)]"}, {"id": "3", "type": "stmt", "val": "ans_grid = Traversing the ans_list\uff0c for each item (x, y, lengtha, lengthb), the inputgrid (x+1, y+1) pixel is the upper left corner, and the shape is the child of (lengthb-1, lengtha -a) All the grids are painted red and return to the modified grid(input_grid, ans_list)", "subgraph": null}, {"id": "5", "type": "val", "name": "ans_grid", "val": "[[0 0 0 0 0 4 0 0 0 4]\n [0 0 0 0 0 0 2 2 2 0]\n [0 0 0 0 0 0 2 2 2 0]\n [0 0 0 0 0 0 2 2 2 0]\n [0 0 0 0 0 4 0 0 0 4]\n [4 0 0 4 0 0 0 0 0 0]\n [0 2 2 0 0 0 0 0 0 0]\n [0 2 2 0 0 0 0 0 0 0]\n [4 0 0 4 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]]"}, {"id": "6", "type": "stmt", "val": "return ans_grid", "subgraph": null}, {"id": "8", "type": "val", "name": "out", "val": "[[0 0 0 0 0 4 0 0 0 4]\n [0 0 0 0 0 0 2 2 2 0]\n [0 0 0 0 0 0 2 2 2 0]\n [0 0 0 0 0 0 2 2 2 0]\n [0 0 0 0 0 4 0 0 0 4]\n [4 0 0 4 0 0 0 0 0 0]\n [0 2 2 0 0 0 0 0 0 0]\n [0 2 2 0 0 0 0 0 0 0]\n [4 0 0 4 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]]"}], "edges": [["0", "1"], ["1", "2"], ["2", "3"], ["0", "3"], ["3", "5"], ["5", "6"], ["6", "8"]]}