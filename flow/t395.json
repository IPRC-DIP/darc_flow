{"nodes": [{"id": "0", "type": "val", "name": "input", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0]\n [1 1 1 0 1 0 8 0 8 0 0 1 8 0 0 0 0]\n [1 0 1 0 1 0 0 0 0 0 0 1 8 0 8 0 0]\n [1 1 1 0 1 0 0 0 0 0 0 1 0 0 8 0 0]\n [0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0]\n [0 0 0 0 1 0 8 0 0 0 0 1 0 0 0 0 8]\n [0 0 0 0 1 0 0 0 0 8 0 1 0 0 0 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 0 8 0 0 0]\n [0 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0 0 0 0 0]\n [0 8 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0]\n [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0]\n [0 0 0 0 0 8 0 0 0 0 1 8 0 8 0 1 0]\n [0 0 0 8 8 0 0 8 0 0 1 0 0 0 0 1 0]\n [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0]\n [0 0 0 0 0 0 0 0 8 8 0 0 0 0 0 0 8]]"}, {"id": "1", "type": "stmt", "val": "hollow_rectangles = find all hollow rectangles in the input. you can find a non-black position and trace through two directions to get another corner of this rectangle(input)", "subgraph": null}, {"id": "2", "type": "val", "name": "hollow_rectangles", "val": "[((0, 14), (0, 14)), ((1, 4), (8, 11)), ((2, 0), (4, 2)), ((3, 14), (4, 14)), ((6, 6), (6, 6)), ((6, 16), (6, 16)), ((7, 9), (8, 9)), ((8, 13), (8, 13)), ((9, 1), (9, 1)), ((10, 5), (10, 5)), ((11, 1), (11, 1)), ((11, 10), (15, 15)), ((13, 5), (13, 5)), ((13, 13), (13, 13)), ((14, 3), (14, 4)), ((14, 7), (14, 7)), ((16, 8), (16, 9)), ((16, 16), (16, 16))]"}, {"id": "3", "type": "stmt", "val": "max_hollow_rectangle = return the max rectangle given the position of all the hollow rectangles(hollow_rectangles)", "subgraph": null}, {"id": "4", "type": "val", "name": "max_hollow_rectangle", "val": "((1, 4), (8, 11))"}, {"id": "5", "type": "stmt", "val": "output = clip the rectangle from input to get a new numpy array(input, max_hollow_rectangle)", "subgraph": null}, {"id": "6", "type": "val", "name": "output", "val": "[[1 1 1 1 1 1 1 1]\n [1 0 8 0 8 0 0 1]\n [1 0 0 0 0 0 0 1]\n [1 0 0 0 0 0 0 1]\n [1 0 0 0 0 0 0 1]\n [1 0 8 0 0 0 0 1]\n [1 0 0 0 0 8 0 1]\n [1 1 1 1 1 1 1 1]]"}, {"id": "7", "type": "stmt", "val": "color = find the color which is not black inside of input, notice that Eliminate the outermost circle(output)", "subgraph": null}, {"id": "8", "type": "val", "name": "color", "val": "8"}, {"id": "9", "type": "stmt", "val": "output = color all the positions in the input array which is not black with the color(output, color)", "subgraph": null}, {"id": "10", "type": "val", "name": "output", "val": "[[8 8 8 8 8 8 8 8]\n [8 0 8 0 8 0 0 8]\n [8 0 0 0 0 0 0 8]\n [8 0 0 0 0 0 0 8]\n [8 0 0 0 0 0 0 8]\n [8 0 8 0 0 0 0 8]\n [8 0 0 0 0 8 0 8]\n [8 8 8 8 8 8 8 8]]"}, {"id": "11", "type": "stmt", "val": "return output", "subgraph": null}, {"id": "13", "type": "val", "name": "out", "val": "[[8 8 8 8 8 8 8 8]\n [8 0 8 0 8 0 0 8]\n [8 0 0 0 0 0 0 8]\n [8 0 0 0 0 0 0 8]\n [8 0 0 0 0 0 0 8]\n [8 0 8 0 0 0 0 8]\n [8 0 0 0 0 8 0 8]\n [8 8 8 8 8 8 8 8]]"}], "edges": [["0", "1"], ["1", "2"], ["2", "3"], ["3", "4"], ["4", "5"], ["0", "5"], ["5", "6"], ["6", "7"], ["7", "8"], ["8", "9"], ["6", "9"], ["9", "10"], ["10", "11"], ["11", "13"]]}