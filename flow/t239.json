{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 4 0 8 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 1 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "d = Obtain the height of the input image matrix, denoted as d (which is also equal to the width)(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "d", "val": "19"}, {"id": "3", "type": "stmt", "val": "input_grid = Rotate the input image by 90 degrees, 180 degrees, and 270 degrees respectively, to obtain input_grid1, input_grid2, and input_grid3. Then, add these three images on top of the original input_grid.(input_grid)", "subgraph": null}, {"id": "4", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 1 0 3 0 0 0 0 0 0 0 0 0 0 0 3 0 1 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 4 0 8 0 0 0 8 0 4 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0 8 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0 8 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 4 0 8 0 0 0 8 0 4 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 1 0 3 0 0 0 0 0 0 0 0 0 0 0 3 0 1 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "5", "type": "stmt", "val": "input_grid = Function name is assign_colors_to_pixels1. Traverse from row 0 to row int(d/2). For each i-th row, visit coordinate (i,i+2) and record its color as c. Then, for the subsequent pixels in that row, assign pixels with even distances to c (coordinates are (i,i+4), (i,i+6), (i,i+8), and so on), until encountering a non-black pixel.(input_grid, d)", "subgraph": null}, {"id": "6", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 1 0 3 0 3 0 3 0 3 0 3 0 3 0 3 0 1 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 4 0 8 0 8 0 8 0 4 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0 8 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0 8 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 4 0 8 0 0 0 8 0 4 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 1 0 3 0 0 0 0 0 0 0 0 0 0 0 3 0 1 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "7", "type": "stmt", "val": "input_grid = Function name is assign_colors_to_pixels2. Traverse from row int(d/2) to row d. For each i-th row, visit coordinate (i,i-2) and record its color as c. Then, for the previous pixels in that row, assign pixels with even distances to c (coordinates are (i,i-4), (i,i-6), (i,i-8), and so on), until encountering a non-black pixel.(input_grid, d)", "subgraph": null}, {"id": "8", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 1 0 3 0 3 0 3 0 3 0 3 0 3 0 3 0 1 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 4 0 8 0 8 0 8 0 4 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0 8 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0 8 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 4 0 8 0 8 0 8 0 4 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 1 0 3 0 3 0 3 0 3 0 3 0 3 0 3 0 1 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "9", "type": "stmt", "val": "output_grid = Rotate the modified input_grid by 90 degrees to obtain input_grid4, then create an all-black matrix output_grid of the same size as input_grid. Traverse each pixel in output_grid and assign its value to the corresponding value in input_grid if the value at the corresponding position in input_grid is not 0, otherwise assign its value to the corresponding value in input_grid4.(input_grid)", "subgraph": null}, {"id": "10", "type": "val", "name": "output_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 1 0 3 0 3 0 3 0 3 0 3 0 3 0 3 0 1 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 0 0 4 0 8 0 8 0 8 0 4 0 0 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 0 0 8 0 0 0 0 0 0 0 8 0 0 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 0 0 8 0 0 0 0 0 0 0 8 0 0 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 0 0 8 0 0 0 0 0 0 0 8 0 0 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 0 0 4 0 8 0 8 0 8 0 4 0 0 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 1 0 3 0 3 0 3 0 3 0 3 0 3 0 3 0 1 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "11", "type": "stmt", "val": "return output_grid", "subgraph": null}, {"id": "13", "type": "val", "name": "out", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 1 0 3 0 3 0 3 0 3 0 3 0 3 0 3 0 1 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 0 0 4 0 8 0 8 0 8 0 4 0 0 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 0 0 8 0 0 0 0 0 0 0 8 0 0 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 0 0 8 0 0 0 0 0 0 0 8 0 0 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 0 0 8 0 0 0 0 0 0 0 8 0 0 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 0 0 4 0 8 0 8 0 8 0 4 0 0 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 3 0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 1 0 3 0 3 0 3 0 3 0 3 0 3 0 3 0 1 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}], "edges": [["0", "1"], ["1", "2"], ["0", "3"], ["3", "4"], ["2", "5"], ["4", "5"], ["5", "6"], ["2", "7"], ["6", "7"], ["7", "8"], ["8", "9"], ["9", "10"], ["10", "11"], ["11", "13"]]}