{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[5 5 2 5 2 5 5 5 5 5 5 2 5 2 5 5]\n [5 2 2 5 5 5 2 2 2 2 5 5 5 2 2 5]\n [2 2 5 8 5 2 2 5 5 2 2 5 8 5 2 2]\n [5 5 8 5 5 2 5 5 5 5 2 5 5 8 5 5]\n [2 5 5 5 4 6 6 9 3 3 3 3 3 5 5 2]\n [5 5 2 2 6 6 9 9 3 3 3 3 3 2 5 5]\n [5 2 2 5 6 9 6 9 3 3 3 3 3 2 2 5]\n [5 2 5 5 9 9 9 9 3 3 3 3 3 5 2 5]\n [5 2 5 5 9 9 9 9 3 3 3 3 3 5 2 5]\n [5 2 2 5 6 9 6 9 9 6 9 6 5 2 2 5]\n [5 5 2 2 6 6 9 9 9 9 6 6 2 2 5 5]\n [2 5 5 5 4 6 6 9 9 6 6 4 5 5 5 2]\n [5 5 8 5 5 2 5 5 5 5 2 5 5 8 5 5]\n [2 2 5 8 5 2 2 5 5 2 2 5 8 5 2 2]\n [5 2 2 5 5 5 2 2 2 2 5 5 5 2 2 5]\n [5 5 2 5 2 5 5 5 5 5 5 2 5 2 5 5]]"}, {"id": "1", "type": "stmt", "val": "(r1, r2, c1, c2) = Find the smallest matrix with all green pixels in the input_grid(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "r1", "val": "4"}, {"id": "3", "type": "val", "name": "r2", "val": "8"}, {"id": "4", "type": "val", "name": "c1", "val": "8"}, {"id": "5", "type": "val", "name": "c2", "val": "12"}, {"id": "6", "type": "stmt", "val": "w = Return the width of the input_grid(input_grid)", "subgraph": null}, {"id": "7", "type": "val", "name": "w", "val": "16"}, {"id": "9", "type": "stmt", "val": "out = For each green pixel, denote it in line r, column c. Replace it with the color of the pixel in line w-r, column c_mirror(input_grid, w)", "subgraph": null}, {"id": "11", "type": "val", "name": "out", "val": "[[5 5 2 5 2 5 5 5 5 5 5 2 5 2 5 5]\n [5 2 2 5 5 5 2 2 2 2 5 5 5 2 2 5]\n [2 2 5 8 5 2 2 5 5 2 2 5 8 5 2 2]\n [5 5 8 5 5 2 5 5 5 5 2 5 5 8 5 5]\n [2 5 5 5 4 6 6 9 9 6 6 4 5 5 5 2]\n [5 5 2 2 6 6 9 9 9 9 6 6 2 2 5 5]\n [5 2 2 5 6 9 6 9 9 6 9 6 5 2 2 5]\n [5 2 5 5 9 9 9 9 9 9 9 9 5 5 2 5]\n [5 2 5 5 9 9 9 9 9 9 9 9 5 5 2 5]\n [5 2 2 5 6 9 6 9 9 6 9 6 5 2 2 5]\n [5 5 2 2 6 6 9 9 9 9 6 6 2 2 5 5]\n [2 5 5 5 4 6 6 9 9 6 6 4 5 5 5 2]\n [5 5 8 5 5 2 5 5 5 5 2 5 5 8 5 5]\n [2 2 5 8 5 2 2 5 5 2 2 5 8 5 2 2]\n [5 2 2 5 5 5 2 2 2 2 5 5 5 2 2 5]\n [5 5 2 5 2 5 5 5 5 5 5 2 5 2 5 5]]"}, {"id": "12", "type": "stmt", "val": "out = Return the matrix composed of rows from r1 to r2 and columns from c1 to c2(out, r1, r2, c1, c2)", "subgraph": null}, {"id": "13", "type": "val", "name": "out", "val": "[[9 6 6 4 5]\n [9 9 6 6 2]\n [9 6 9 6 5]\n [9 9 9 9 5]\n [9 9 9 9 5]]"}, {"id": "14", "type": "stmt", "val": "return out", "subgraph": null}, {"id": "15", "type": "val", "name": "out", "val": "[[9 6 6 4 5]\n [9 9 6 6 2]\n [9 6 9 6 5]\n [9 9 9 9 5]\n [9 9 9 9 5]]"}], "edges": [["0", "1"], ["1", "2"], ["1", "3"], ["1", "4"], ["1", "5"], ["0", "6"], ["6", "7"], ["7", "9"], ["0", "9"], ["9", "11"], ["3", "12"], ["2", "12"], ["4", "12"], ["5", "12"], ["11", "12"], ["12", "13"], ["13", "14"], ["14", "15"]]}