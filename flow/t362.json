{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 5 5 5 0 5 5 5 5 0]\n [5 5 5 0 5 5 5 5 0 5]\n [0 0 5 5 5 5 0 5 0 0]\n [0 0 5 5 5 5 0 5 5 5]\n [0 0 5 5 5 2 2 0 0 5]\n [5 5 0 0 0 2 2 5 5 5]\n [0 0 5 5 0 2 2 5 5 5]\n [0 5 5 5 5 5 5 0 0 0]\n [5 5 0 0 5 5 5 0 0 0]\n [5 0 5 0 5 0 0 5 0 0]]"}, {"id": "1", "type": "stmt", "val": "m = Return the smallest matrix which includes all red pixels in the input grid(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "m", "val": "[[2 2]\n [2 2]\n [2 2]]"}, {"id": "3", "type": "stmt", "val": "out = For each submatrix of input grid, which has the same shape as m, if the corresponding pixels of red pixels in m are all black, replace them as red(input_grid, m)", "subgraph": null}, {"id": "5", "type": "val", "name": "out", "val": "[[0 5 5 5 0 5 5 5 5 0]\n [5 5 5 0 5 5 5 5 0 5]\n [2 2 5 5 5 5 0 5 0 0]\n [2 2 5 5 5 5 0 5 5 5]\n [2 2 5 5 5 2 2 0 0 5]\n [5 5 0 0 0 2 2 5 5 5]\n [0 0 5 5 0 2 2 5 5 5]\n [0 5 5 5 5 5 5 0 2 2]\n [5 5 0 0 5 5 5 0 2 2]\n [5 0 5 0 5 0 0 5 2 2]]"}, {"id": "6", "type": "stmt", "val": "return out", "subgraph": null}, {"id": "7", "type": "val", "name": "out", "val": "[[0 5 5 5 0 5 5 5 5 0]\n [5 5 5 0 5 5 5 5 0 5]\n [2 2 5 5 5 5 0 5 0 0]\n [2 2 5 5 5 5 0 5 5 5]\n [2 2 5 5 5 2 2 0 0 5]\n [5 5 0 0 0 2 2 5 5 5]\n [0 0 5 5 0 2 2 5 5 5]\n [0 5 5 5 5 5 5 0 2 2]\n [5 5 0 0 5 5 5 0 2 2]\n [5 0 5 0 5 0 0 5 2 2]]"}], "edges": [["0", "1"], ["1", "2"], ["2", "3"], ["0", "3"], ["3", "5"], ["5", "6"], ["6", "7"]]}