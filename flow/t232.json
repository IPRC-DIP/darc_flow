{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 2 2 2 2 2 2 2 2 2 2 2 2 0]\n [0 0 2 0 2 2 2 2 0 2 2 2 0 2 0]\n [0 0 2 0 0 2 2 0 0 2 2 2 2 2 0]\n [0 0 2 2 0 0 2 2 0 2 2 2 2 2 0]\n [0 0 2 2 2 2 2 2 2 2 2 2 2 2 0]\n [0 0 2 2 2 2 2 2 2 2 2 2 2 2 0]\n [0 0 2 2 2 2 2 2 2 0 0 0 2 2 0]\n [0 0 2 2 2 2 2 2 2 2 2 2 2 2 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 1 1 1 0 0 0 0 2 3 3 0 0 0 0]\n [0 1 2 1 0 0 0 0 2 2 3 0 0 0 0]\n [0 1 1 1 0 0 0 0 2 3 3 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 8 8 2 0]\n [0 0 0 4 2 4 0 0 0 0 0 8 2 2 0]\n [0 0 0 4 2 4 0 0 0 0 0 2 2 8 0]\n [0 0 0 4 2 4 0 0 0 0 0 0 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "coordinates = return all left top coordinates of 3x3 grids in the grid(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "coordinates", "val": "[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (2, 12), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12), (9, 0), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (10, 0), (10, 1), (10, 2), (10, 3), (10, 4), (10, 5), (10, 6), (10, 7), (10, 8), (10, 9), (10, 10), (10, 11), (10, 12), (11, 0), (11, 1), (11, 2), (11, 3), (11, 4), (11, 5), (11, 6), (11, 7), (11, 8), (11, 9), (11, 10), (11, 11), (11, 12), (12, 0), (12, 1), (12, 2), (12, 3), (12, 4), (12, 5), (12, 6), (12, 7), (12, 8), (12, 9), (12, 10), (12, 11), (12, 12), (13, 0), (13, 1), (13, 2), (13, 3), (13, 4), (13, 5), (13, 6), (13, 7), (13, 8), (13, 9), (13, 10), (13, 11), (13, 12), (14, 0), (14, 1), (14, 2), (14, 3), (14, 4), (14, 5), (14, 6), (14, 7), (14, 8), (14, 9), (14, 10), (14, 11), (14, 12), (15, 0), (15, 1), (15, 2), (15, 3), (15, 4), (15, 5), (15, 6), (15, 7), (15, 8), (15, 9), (15, 10), (15, 11), (15, 12), (16, 0), (16, 1), (16, 2), (16, 3), (16, 4), (16, 5), (16, 6), (16, 7), (16, 8), (16, 9), (16, 10), (16, 11), (16, 12)]"}, {"id": "3", "type": "stmt", "val": "squares_coordinates = find 3x3 grids which only has only two color, and none of them is black(coordinates, input_grid)", "subgraph": null}, {"id": "4", "type": "val", "name": "squares_coordinates", "val": "[(11, 1), (11, 8), (15, 11), (16, 3)]"}, {"id": "5", "type": "stmt", "val": "squares = copy the 3x3 small grid from the grid according to the coordinates, return a list of np.array(input_grid, squares_coordinates)", "subgraph": null}, {"id": "6", "type": "val", "name": "squares", "val": "[array([[1, 1, 1],\n       [1, 2, 1],\n       [1, 1, 1]]), array([[2, 3, 3],\n       [2, 2, 3],\n       [2, 3, 3]]), array([[8, 8, 2],\n       [8, 2, 2],\n       [2, 2, 8]]), array([[4, 2, 4],\n       [4, 2, 4],\n       [4, 2, 4]])]"}, {"id": "7", "type": "stmt", "val": "input_grid = paint 3x3 grid to black according to the list of coordinates(input_grid, squares_coordinates)", "subgraph": null}, {"id": "8", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 2 2 2 2 2 2 2 2 2 2 2 2 0]\n [0 0 2 0 2 2 2 2 0 2 2 2 0 2 0]\n [0 0 2 0 0 2 2 0 0 2 2 2 2 2 0]\n [0 0 2 2 0 0 2 2 0 2 2 2 2 2 0]\n [0 0 2 2 2 2 2 2 2 2 2 2 2 2 0]\n [0 0 2 2 2 2 2 2 2 2 2 2 2 2 0]\n [0 0 2 2 2 2 2 2 2 0 0 0 2 2 0]\n [0 0 2 2 2 2 2 2 2 2 2 2 2 2 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "9", "type": "stmt", "val": "(top_left, bottom_right) = find the red shape in the grid(input_grid)", "subgraph": null}, {"id": "10", "type": "val", "name": "top_left", "val": "(1, 2)"}, {"id": "11", "type": "val", "name": "bottom_right", "val": "(8, 13)"}, {"id": "12", "type": "stmt", "val": "output_grid = extract red shape according to the top_left and bottom_right coordinate(input_grid, top_left, bottom_right)", "subgraph": null}, {"id": "13", "type": "val", "name": "output_grid", "val": "[[2 2 2 2 2 2 2 2 2 2 2 2]\n [2 0 2 2 2 2 0 2 2 2 0 2]\n [2 0 0 2 2 0 0 2 2 2 2 2]\n [2 2 0 0 2 2 0 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 0 0 0 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2]]"}, {"id": "14", "type": "stmt", "val": "for (x, y) in return all left top coordinates of 3x3 grids in the grid(output_grid):", "subgraph": null}, {"id": "15", "type": "val", "name": "x", "val": "0"}, {"id": "16", "type": "val", "name": "y", "val": "0"}, {"id": "17", "type": "stmt", "val": "for square in squares:", "subgraph": null}, {"id": "18", "type": "val", "name": "square", "val": "[[1 1 1]\n [1 2 1]\n [1 1 1]]"}, {"id": "20", "type": "stmt", "val": "for square in squares:", "subgraph": null}, {"id": "21", "type": "val", "name": "square", "val": "[[2 3 3]\n [2 2 3]\n [2 3 3]]"}, {"id": "30", "type": "stmt", "val": "for (x, y) in return all left top coordinates of 3x3 grids in the grid(output_grid):", "subgraph": null}, {"id": "896", "type": "val", "name": "output_grid", "val": "[[2 2 2 2 2 2 2 2 2 1 1 1]\n [2 2 8 8 3 3 2 2 2 1 2 1]\n [2 2 2 8 3 2 2 2 2 1 1 1]\n [2 8 2 2 3 3 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 4 4 4 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 4 4 4 2 2]]"}, {"id": "929", "type": "stmt", "val": "return output_grid", "subgraph": null}, {"id": "931", "type": "val", "name": "out", "val": "[[2 2 2 2 2 2 2 2 2 1 1 1]\n [2 2 8 8 3 3 2 2 2 1 2 1]\n [2 2 2 8 3 2 2 2 2 1 1 1]\n [2 8 2 2 3 3 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 4 4 4 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 4 4 4 2 2]]"}], "edges": [["0", "1"], ["1", "2"], ["2", "3"], ["0", "3"], ["3", "4"], ["4", "5"], ["0", "5"], ["5", "6"], ["4", "7"], ["0", "7"], ["7", "8"], ["8", "9"], ["9", "10"], ["9", "11"], ["10", "12"], ["8", "12"], ["11", "12"], ["12", "13"], ["13", "14"], ["14", "15"], ["14", "16"], ["6", "17"], ["17", "18"], ["18", "20"], ["6", "20"], ["20", "21"], ["16", "30"], ["15", "30"], ["13", "30"], ["896", "929"], ["929", "931"]]}