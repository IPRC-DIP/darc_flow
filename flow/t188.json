{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 3 0 0 8 0 0]\n [3 3 0 3 0 3 8 0 0]\n [0 3 0 3 0 3 8 0 0]\n [0 3 3 3 0 0 8 0 0]\n [0 3 0 0 0 3 8 0 0]\n [0 0 3 0 0 0 8 0 0]\n [8 8 8 8 8 8 8 8 8]\n [0 0 0 0 0 0 8 2 1]\n [0 0 0 0 0 0 8 4 7]]"}, {"id": "1", "type": "stmt", "val": "m = Return the smallest matrix containing all pixels that are not black, green, or teal(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "m", "val": "[[2 1]\n [4 7]]"}, {"id": "3", "type": "stmt", "val": "n = Return the smallest matrix containing all green pixels(input_grid)", "subgraph": null}, {"id": "4", "type": "val", "name": "n", "val": "[[0 0 0 3 0 0]\n [3 3 0 3 0 3]\n [0 3 0 3 0 3]\n [0 3 3 3 0 0]\n [0 3 0 0 0 3]\n [0 0 3 0 0 0]]"}, {"id": "5", "type": "stmt", "val": "out = m is a 2x2 matrix. Devide matrix n into 4 submatrices. For each submatrix, replace all green pixels with the color of the corresponding pixel in m(m, n)", "subgraph": null}, {"id": "8", "type": "val", "name": "out", "val": "[[0 0 0 1 0 0]\n [2 2 0 1 0 1]\n [0 2 0 1 0 1]\n [0 4 4 7 0 0]\n [0 4 0 0 0 7]\n [0 0 4 0 0 0]]"}, {"id": "9", "type": "stmt", "val": "return out", "subgraph": null}, {"id": "10", "type": "val", "name": "out", "val": "[[0 0 0 1 0 0]\n [2 2 0 1 0 1]\n [0 2 0 1 0 1]\n [0 4 4 7 0 0]\n [0 4 0 0 0 7]\n [0 0 4 0 0 0]]"}], "edges": [["0", "1"], ["1", "2"], ["0", "3"], ["3", "4"], ["2", "5"], ["4", "5"], ["5", "8"], ["8", "9"], ["9", "10"]]}