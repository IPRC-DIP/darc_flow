{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 8 0 5 0 0 9 0 6 0 0 0 0 5]\n [6 7 6 0 4 0 2 0 0 8 3 6 2 0 0 0]\n [0 0 0 7 0 0 5 4 1 0 1 7 6 0 0 0]\n [0 5 8 0 9 0 0 2 2 0 8 0 4 0 0 7]\n [4 0 0 4 2 2 7 3 2 0 6 4 9 9 9 0]\n [0 1 8 0 5 0 0 0 2 0 0 8 0 9 6 6]\n [9 9 0 2 8 0 0 3 0 0 2 0 0 5 8 0]\n [1 3 0 1 6 1 0 0 0 8 0 0 0 4 0 0]\n [0 0 4 0 7 4 0 0 4 0 0 5 8 0 4 0]\n [0 0 0 6 0 6 0 0 0 0 0 8 0 1 4 4]\n [0 9 0 0 9 0 0 0 0 0 1 5 0 6 0 0]\n [6 0 7 5 9 0 7 0 0 0 4 6 0 2 8 0]\n [5 0 0 0 1 0 2 4 8 0 0 3 0 9 0 8]\n [1 0 0 2 4 0 0 0 1 7 0 0 0 0 5 0]\n [6 9 0 0 7 7 1 0 2 0 0 9 1 0 3 0]\n [1 8 3 0 0 9 7 0 2 7 2 0 8 9 0 0]]"}, {"id": "1", "type": "stmt", "val": "positions = get all positions which is colored as blue(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "positions", "val": "[(2, 8), (2, 10), (5, 1), (7, 0), (7, 3), (7, 5), (9, 13), (10, 10), (12, 4), (13, 0), (13, 8), (14, 6), (14, 12), (15, 0)]"}, {"id": "3", "type": "stmt", "val": "output = np.copy(input_grid)", "subgraph": null}, {"id": "4", "type": "val", "name": "output", "val": "[[0 0 0 8 0 5 0 0 9 0 6 0 0 0 0 5]\n [6 7 6 0 4 0 2 0 0 8 3 6 2 0 0 0]\n [0 0 0 7 0 0 5 4 1 0 1 7 6 0 0 0]\n [0 5 8 0 9 0 0 2 2 0 8 0 4 0 0 7]\n [4 0 0 4 2 2 7 3 2 0 6 4 9 9 9 0]\n [0 1 8 0 5 0 0 0 2 0 0 8 0 9 6 6]\n [9 9 0 2 8 0 0 3 0 0 2 0 0 5 8 0]\n [1 3 0 1 6 1 0 0 0 8 0 0 0 4 0 0]\n [0 0 4 0 7 4 0 0 4 0 0 5 8 0 4 0]\n [0 0 0 6 0 6 0 0 0 0 0 8 0 1 4 4]\n [0 9 0 0 9 0 0 0 0 0 1 5 0 6 0 0]\n [6 0 7 5 9 0 7 0 0 0 4 6 0 2 8 0]\n [5 0 0 0 1 0 2 4 8 0 0 3 0 9 0 8]\n [1 0 0 2 4 0 0 0 1 7 0 0 0 0 5 0]\n [6 9 0 0 7 7 1 0 2 0 0 9 1 0 3 0]\n [1 8 3 0 0 9 7 0 2 7 2 0 8 9 0 0]]"}, {"id": "6", "type": "stmt", "val": "position = positions.pop()", "subgraph": null}, {"id": "7", "type": "val", "name": "positions", "val": "[(2, 8), (2, 10), (5, 1), (7, 0), (7, 3), (7, 5), (9, 13), (10, 10), (12, 4), (13, 0), (13, 8), (14, 6), (14, 12)]"}, {"id": "8", "type": "val", "name": "position", "val": "(15, 0)"}, {"id": "9", "type": "stmt", "val": "adjacent = turn positions that is four connected to the input position, and its color is black(output, position)", "subgraph": null}, {"id": "10", "type": "val", "name": "adjacent", "val": "[]"}, {"id": "14", "type": "stmt", "val": "position = positions.pop()", "subgraph": null}, {"id": "15", "type": "val", "name": "positions", "val": "[(2, 8), (2, 10), (5, 1), (7, 0), (7, 3), (7, 5), (9, 13), (10, 10), (12, 4), (13, 0), (13, 8), (14, 6)]"}, {"id": "16", "type": "val", "name": "position", "val": "(14, 12)"}, {"id": "17", "type": "stmt", "val": "adjacent = turn positions that is four connected to the input position, and its color is black(output, position)", "subgraph": null}, {"id": "18", "type": "val", "name": "adjacent", "val": "[(13, 12), (14, 13)]"}, {"id": "19", "type": "stmt", "val": "positions += adjacent", "subgraph": null}, {"id": "21", "type": "stmt", "val": "output = color every position in the second input of the grid as blue(output, adjacent)", "subgraph": null}, {"id": "933", "type": "val", "name": "output", "val": "[[0 0 0 8 0 5 1 1 9 0 6 0 0 0 0 5]\n [6 7 6 0 4 0 2 1 1 8 3 6 2 0 0 0]\n [0 0 0 7 0 0 5 4 1 1 1 7 6 0 0 0]\n [0 5 8 0 9 0 0 2 2 1 8 0 4 0 0 7]\n [4 1 1 4 2 2 7 3 2 1 6 4 9 9 9 0]\n [1 1 8 0 5 1 1 1 2 1 1 8 1 9 6 6]\n [9 9 1 2 8 1 1 3 1 1 2 1 1 5 8 0]\n [1 3 1 1 6 1 1 1 1 8 1 1 1 4 0 0]\n [1 1 4 1 7 4 1 1 4 1 1 5 8 1 4 0]\n [1 1 1 6 0 6 1 1 1 1 1 8 1 1 4 4]\n [1 9 1 1 9 1 1 1 1 1 1 5 1 6 0 0]\n [6 1 7 5 9 1 7 1 1 1 4 6 1 2 8 0]\n [5 1 1 1 1 1 2 4 8 1 1 3 1 9 0 8]\n [1 1 1 2 4 1 1 1 1 7 1 1 1 1 5 0]\n [6 9 1 1 7 7 1 1 2 1 1 9 1 1 3 0]\n [1 8 3 1 1 9 7 1 2 7 2 0 8 9 0 0]]"}, {"id": "943", "type": "stmt", "val": "return output", "subgraph": null}, {"id": "945", "type": "val", "name": "out", "val": "[[0 0 0 8 0 5 1 1 9 0 6 0 0 0 0 5]\n [6 7 6 0 4 0 2 1 1 8 3 6 2 0 0 0]\n [0 0 0 7 0 0 5 4 1 1 1 7 6 0 0 0]\n [0 5 8 0 9 0 0 2 2 1 8 0 4 0 0 7]\n [4 1 1 4 2 2 7 3 2 1 6 4 9 9 9 0]\n [1 1 8 0 5 1 1 1 2 1 1 8 1 9 6 6]\n [9 9 1 2 8 1 1 3 1 1 2 1 1 5 8 0]\n [1 3 1 1 6 1 1 1 1 8 1 1 1 4 0 0]\n [1 1 4 1 7 4 1 1 4 1 1 5 8 1 4 0]\n [1 1 1 6 0 6 1 1 1 1 1 8 1 1 4 4]\n [1 9 1 1 9 1 1 1 1 1 1 5 1 6 0 0]\n [6 1 7 5 9 1 7 1 1 1 4 6 1 2 8 0]\n [5 1 1 1 1 1 2 4 8 1 1 3 1 9 0 8]\n [1 1 1 2 4 1 1 1 1 7 1 1 1 1 5 0]\n [6 9 1 1 7 7 1 1 2 1 1 9 1 1 3 0]\n [1 8 3 1 1 9 7 1 2 7 2 0 8 9 0 0]]"}], "edges": [["0", "1"], ["1", "2"], ["0", "3"], ["3", "4"], ["2", "6"], ["6", "7"], ["6", "8"], ["8", "9"], ["4", "9"], ["9", "10"], ["7", "14"], ["8", "14"], ["14", "15"], ["14", "16"], ["16", "17"], ["10", "17"], ["4", "17"], ["17", "18"], ["18", "19"], ["15", "19"], ["18", "21"], ["4", "21"], ["933", "943"], ["943", "945"]]}