{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[2 0 2 2 0]\n [2 0 0 2 2]\n [2 2 2 0 0]\n [2 2 2 2 2]\n [0 2 2 0 0]\n [2 2 2 2 2]\n [4 4 4 4 4]\n [0 0 0 2 2]\n [2 0 0 0 2]\n [2 2 2 0 2]\n [0 2 2 0 0]\n [2 0 2 2 0]\n [2 0 2 2 2]]"}, {"id": "1", "type": "stmt", "val": "mindex = Find a yellow line and return the index of the line(input_grid)", "subgraph": null}, {"id": "2", "type": "val", "name": "mindex", "val": "6"}, {"id": "3", "type": "stmt", "val": "ngrid = np.zeros((input_grid.shape[0] // 2, input_grid.shape[1]))", "subgraph": null}, {"id": "4", "type": "val", "name": "ngrid", "val": "[[0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0.]]"}, {"id": "5", "type": "stmt", "val": "ans_grid = Traverse all pixels whose row number is less than mindex in inputgrid, set the pixel coordinates as (x, y), if the value of the pixel is the same as the value of (x + mindex + 1, y), then change the value of ngrid (x, y) to zero; change to green if different.Return the ngrid(input_grid, mindex, ngrid)", "subgraph": null}, {"id": "7", "type": "val", "name": "ans_grid", "val": "[[3. 0. 3. 0. 3.]\n [0. 0. 0. 3. 0.]\n [0. 0. 0. 0. 3.]\n [3. 0. 0. 3. 3.]\n [3. 3. 0. 3. 0.]\n [0. 3. 0. 0. 0.]]"}, {"id": "8", "type": "stmt", "val": "return ans_grid", "subgraph": null}, {"id": "10", "type": "val", "name": "out", "val": "[[3. 0. 3. 0. 3.]\n [0. 0. 0. 3. 0.]\n [0. 0. 0. 0. 3.]\n [3. 0. 0. 3. 3.]\n [3. 3. 0. 3. 0.]\n [0. 3. 0. 0. 0.]]"}], "edges": [["0", "1"], ["1", "2"], ["0", "3"], ["3", "4"], ["0", "5"], ["4", "5"], ["2", "5"], ["5", "7"], ["7", "8"], ["8", "10"]]}